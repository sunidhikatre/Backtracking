//{ Driver Code Starts
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); // Number of test cases
        sc.nextLine();        // Consume the newline character

        while (t-- > 0) {
            String input = sc.nextLine();

            // Replace ][ with ],[
            input = input.replace("][", "],[");

            ArrayList<ArrayList<Integer>> mat = new ArrayList<>();
            String[] rows = input.split("],\\s*\\[");

            for (String row : rows) {
                row = row.replaceAll("[\\[\\]]", ""); // Remove any surrounding brackets
                ArrayList<Integer> intRow = new ArrayList<>();
                for (String num : row.split(",")) {
                    intRow.add(Integer.parseInt(num.trim()));
                }
                mat.add(intRow);
            }

            Solution obj = new Solution();
            ArrayList<String> result = obj.findPath(mat);

            if (result.isEmpty()) {
                System.out.println("[]");
            } else {
                for (String res : result) {
                    System.out.print(res + " ");
                }
                System.out.println();
            }
            System.out.println("~");
        }
        sc.close();
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    // Function to find all possible paths
    int n;
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> mat) {
        n = mat.size();
        int[][] visited = new int[n][n];
        ArrayList<String> ans = new ArrayList<String>();
        for(int i=0; i< n; i++) {
            for(int j=0; j<n; j++) {
                visited[i][j] = 0;
            }
        }
        String move = "";
        if(mat.get(0).get(0) == 1) {
            return solve(mat, 0, 0, move, ans, visited);
        }
        return ans;
    }
    
    public ArrayList<String> solve(ArrayList<ArrayList<Integer>> mat, int i, int j, String move, ArrayList<String> ans, 
    int[][] visited) {
        if(i == n-1 && j == n-1) {
            ans.add(move);
            return ans;
        }
        
        int[] dx = {1, 0, 0, -1};
        int[] dy = {0, -1, 1, 0};
        char[] dir = {'D', 'L', 'R', 'U'};

        for (int k = 0; k < 4; k++) {
            int ni = i + dx[k];
            int nj = j + dy[k];

            if (ni >= 0 && nj >= 0 && ni < n && nj < n &&
                mat.get(ni).get(nj) == 1 && visited[ni][nj] == 0) {
                visited[i][j] = 1;
                solve(mat, ni, nj, move + dir[k], ans, visited);
                visited[i][j] = 0; 
            }
        }
        return ans;
        
    }
    
}
